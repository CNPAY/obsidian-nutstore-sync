name: Generate Changelog

on:
  push:
    tags:
      - '*'

permissions:
  contents: write # Needed to commit the CHANGELOG.md file
  pull-requests: read # Optional: Needed if you want to read PR data

jobs:
  generate_changelog:
    runs-on: ubuntu-latest
    # Prevent running on commits made by this action itself
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get Latest Tag
        id: latest_tag
        run: |
          # Get the current tag that triggered the workflow
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -A 1 "^$CURRENT_TAG$" | tail -n 1)
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Get Commit Messages Since Last Tag
        id: commit_messages
        run: |
          if [ -z "${{ steps.latest_tag.outputs.previous_tag }}" ]; then
            echo "No previous tag found. Getting recent commits..."
            COMMIT_RANGE="HEAD~20..HEAD" # Adjust limit as needed
          else
            echo "Getting commits between ${{ steps.latest_tag.outputs.previous_tag }} and ${{ steps.latest_tag.outputs.current_tag }}..."
            COMMIT_RANGE="${{ steps.latest_tag.outputs.previous_tag }}..${{ steps.latest_tag.outputs.current_tag }}"
          fi
          COMMIT_LOG=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -E "^- (feat|fix|refactor):")
          COMMIT_LOG_ESCAPED=$(echo "$COMMIT_LOG" | sed -z 's/\n/\\n/g' | sed 's/"/\\"/g') # Escape for JSON
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_LOG_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Raw commits fetched:"
          echo "$COMMIT_LOG"

      - name: Call Google Gemini API to Generate Changelog Entry
        id: ai_changelog
        # Only run if there are commit messages
        if: steps.commit_messages.outputs.commits != ''
        run: |
          MAX_RETRIES=3
          RETRY_DELAY=5
          ATTEMPT=0
          SUCCESS=false
          
          while [ $ATTEMPT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Attempt $ATTEMPT of $MAX_RETRIES"
            
            # System prompt defines the AI's role and overall instructions (from OpenAI version)
            SYSTEM_PROMPT="You are a helpful assistant that generates changelog entries. Generate a concise and user-friendly changelog entry in Markdown bullet points based on the provided commit messages. Focus on user-facing changes, features, and bug fixes. Group similar items if possible. This will be running in a GitHub Action, please make sure to use CI compatible characters. You should write in both Chinese and English, with Chinese first. Do not include a header, just the bullet points."
            
            # User prompt contains the specific data for this run (from OpenAI version)
            USER_INPUT_PROMPT="Commit messages:\n\n${{ steps.commit_messages.outputs.commits }}"

            # Combine system and user prompts for Gemini
            COMBINED_PROMPT="${SYSTEM_PROMPT}\n\n${USER_INPUT_PROMPT}"

            # Calculate dynamic max tokens based on commit message lines
            COMMIT_LINES=$(echo "${{ steps.commit_messages.outputs.commits }}" | grep -c '^-')
            BASE_TOKENS=300  # Base tokens for template and formatting
            PER_LINE_TOKENS=20 # Additional tokens per commit line
            MAX_TOKENS=$(( BASE_TOKENS + (COMMIT_LINES * PER_LINE_TOKENS) ))
            MAX_TOKENS=$(( MAX_TOKENS > 1000 ? 1000 : MAX_TOKENS )) # Cap at 1000 tokens
            
            # Construct the JSON payload for Gemini API as a single line
            # Using gemini-1.5-flash model
            JSON_PAYLOAD=$(jq -n --arg prompt_text "$COMBINED_PROMPT" --argjson maxOutputTokens "$MAX_TOKENS" \
            '{
              "contents":[{"parts":[{"text": $prompt_text}]}],
              "generationConfig":{"temperature":0.4,"topP":0.85,"maxOutputTokens": $maxOutputTokens,"stopSequences":["##"]},
              "safetySettings":[{"category":"HARM_CATEGORY_DANGEROUS_CONTENT","threshold":"BLOCK_NONE"}]
            }')

            echo "Sending prompt to Gemini API (gemini-1.5-flash)..."
            # Use gemini-1.5-flash model
            API_ENDPOINT="https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}"

            API_RESPONSE=$(curl -s -X POST "$API_ENDPOINT" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD")

            echo "Gemini Raw Response: $API_RESPONSE"

            # Check for error in response
            ERROR_MSG=$(echo "$API_RESPONSE" | jq -r '.error.message // empty')
            if [ -n "$ERROR_MSG" ]; then
              echo "API Error: $ERROR_MSG"
              sleep $RETRY_DELAY
              continue
            fi

            # Validate JSON structure and extract content
            if ! jq -e '.candidates[0].content.parts[0].text' <<< "$API_RESPONSE" >/dev/null 2>&1; then
              echo "Invalid JSON response structure"
              echo "Response structure: $(echo "$API_RESPONSE" | jq -r 'keys')"
              sleep $RETRY_DELAY
              continue
            fi

            GENERATED_TEXT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text? // empty' | sed '/^$/d')
            
            if [ -n "$GENERATED_TEXT" ]; then
              SUCCESS=true
              echo "Generated Changelog Text:"
              echo "$GENERATED_TEXT"
              echo "changelog_entry<<EOF" >> $GITHUB_OUTPUT
              echo "$GENERATED_TEXT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "Empty response from API"
              sleep $RETRY_DELAY
            fi
          done

          if [ "$SUCCESS" = "false" ]; then
            echo "Failed after $MAX_RETRIES attempts. Exiting with error."
            exit 1
          fi
        env:
           GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}


      - name: Update CHANGELOG.md
        # Only run if AI generated text
        if: steps.ai_changelog.outputs.changelog_entry != ''
        env:
          GENERATED_CONTENT: ${{ steps.ai_changelog.outputs.changelog_entry }}
        run: |
          CHANGELOG_FILE="CHANGELOG.md"
          NEW_ENTRY_HEADING="## [Unreleased] - $(date +'%Y-%m-%d')"

          # Create file if it doesn't exist with a basic structure
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "# Changelog" > "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "All notable changes to this project will be documented in this file." >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi

          # Check if [Unreleased] section exists
          if grep -q "## \[Unreleased\]" "$CHANGELOG_FILE"; then
            # Insert below the [Unreleased] heading
            # Use awk for safer multi-line insertion
            awk -v heading="$NEW_ENTRY_HEADING" -v content="${GENERATED_CONTENT}" '
            /## \[Unreleased\]/ {
              print;
              print ""; # Add a newline after heading
              print content;
              next # Skip original line printing if needed or adjust logic
            }
            { print }
            ' "$CHANGELOG_FILE" > temp_changelog.md && mv temp_changelog.md "$CHANGELOG_FILE"
          else
            # Prepend a new [Unreleased] section at the top (after header lines)
            # This logic might need refinement based on your exact header structure
            {
              head -n 3 "$CHANGELOG_FILE" # Adjust line count based on your header
              echo ""
              echo "$NEW_ENTRY_HEADING"
              echo ""
              echo "${GENERATED_CONTENT}"
              echo ""
              tail -n +4 "$CHANGELOG_FILE" # Adjust line count
            } > temp_changelog.md && mv temp_changelog.md "$CHANGELOG_FILE"
          fi

          echo "CHANGELOG.md updated."


      - name: Commit and Push CHANGELOG.md
        # Only run if AI generated text
        if: steps.ai_changelog.outputs.changelog_entry != ''
        run: |
          # Check if there are changes to commit
          if git diff --quiet $CHANGELOG_FILE; then
             echo "No changes to CHANGELOG.md to commit."
             exit 0
          fi

          git add CHANGELOG.md
          # Add [skip ci] to prevent triggering this workflow again
          git commit -m "chore: update changelog [skip ci]"
          # Handle potential push conflicts/errors if needed
          git push origin HEAD:refs/heads/main
